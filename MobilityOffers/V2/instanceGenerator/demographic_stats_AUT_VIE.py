from numpy.random import choice
from random import choice as rchoice
from enum import Enum
import attr

from mot import MoT

ONEHOUR = 60
TT_BUFFER_MIN = 60  #  1 hour travel time buffer within vienna

registration_districts = \
    [90101, 90102, 90103, 90104, 90105, 90106, 90107, 90201, 90202, 90203, 90204, 90205, 90206, 90207,
                  90208, 90209, 90301, 90302, 90303, 90304, 90305, 90306, 90307, 90308, 90309, 90310, 90311, 90401,
                  90402, 90403, 90404, 90501, 90502, 90503, 90504, 90601, 90602, 90603, 90701, 90702, 90703, 90704,
                  90705, 90801, 90802, 90803, 90901, 90902, 90903, 90904, 90905, 90906, 91001, 91002, 91003, 91004,
                  91005, 91006, 91007, 91008, 91009, 91010, 91011, 91012, 91013, 91014, 91015, 91016, 91017, 91018,
                  91019, 91020, 91021, 91022, 91023, 91101, 91102, 91103, 91104, 91105, 91106, 91107, 91108, 91109,
                  91110, 91111, 91112, 91113, 91201, 91202, 91203, 91204, 91205, 91206, 91207, 91208, 91209, 91210,
                  91211, 91301, 91302, 91303, 91304, 91305, 91306, 91307, 91308, 91309, 91310, 91311, 91401, 91402,
                  91403, 91404, 91405, 91406, 91407, 91408, 91409, 91410, 91411, 91412, 91501, 91502, 91503, 91504,
                  91505, 91506, 91507, 91601, 91602, 91603, 91604, 91605, 91606, 91607, 91608, 91609, 91610, 91701,
                  91702, 91703, 91704, 91705, 91706, 91801, 91802, 91803, 91804, 91805, 91901, 91902, 91903, 91904,
                  91905, 91906, 91907, 91908, 91909, 91910, 92001, 92002, 92003, 92004, 92005, 92006, 92007, 92008,
                  92101, 92102, 92103, 92104, 92105, 92106, 92107, 92108, 92109, 92110, 92111, 92112, 92113, 92114,
                  92115, 92116, 92117, 92118, 92119, 92120, 92121, 92122, 92123, 92124, 92125, 92126, 92127, 92128,
                  92129, 92130, 92201, 92202, 92203, 92204, 92205, 92206, 92207, 92208, 92209, 92210, 92211, 92212,
                  92213, 92214, 92215, 92216, 92217, 92218, 92219, 92220, 92221, 92222, 92223, 92224, 92225, 92226,
                  92227, 92228, 92229, 92230, 92231, 92232, 92301, 92302, 92303, 92304, 92305, 92306, 92307, 92308,
                  92309, 92310, 92311, 92312, 92313, 92314, 92315, 92316, 92317, 92318, 92319]

p_office = [0.01101119202083060, 0.01101119202083060, 0.01101119202083060, 0.01101119202083060,
            0.01101119202083060, 0.01101119202083060, 0.01101119202083060, 0.00586833487797345,
            0.00586833487797345, 0.00586833487797345, 0.00586833487797345, 0.00586833487797345,
            0.00586833487797345, 0.00586833487797345, 0.00586833487797345, 0.00586833487797345,
            0.00517602718566575, 0.00517602718566575, 0.00517602718566575, 0.00517602718566575,
            0.00517602718566575, 0.00517602718566575, 0.00517602718566575, 0.00517602718566575,
            0.00517602718566575, 0.00517602718566575, 0.00517602718566575, 0.00886833487797345,
            0.00886833487797345, 0.00886833487797345, 0.00886833487797345, 0.00646833487797345,
            0.00646833487797345, 0.00646833487797345, 0.00646833487797345, 0.01153500154464010,
            0.01153500154464010, 0.01153500154464010, 0.01006833487797350, 0.01006833487797350,
            0.01006833487797350, 0.01006833487797350, 0.01006833487797350, 0.00853500154464011,
            0.00853500154464011, 0.00853500154464011, 0.01486833487797350, 0.01486833487797350,
            0.01486833487797350, 0.01486833487797350, 0.01486833487797350, 0.01486833487797350,
            0.00247703053014736, 0.00247703053014736, 0.00247703053014736, 0.00247703053014736,
            0.00247703053014736, 0.00247703053014736, 0.00247703053014736, 0.00247703053014736,
            0.00247703053014736, 0.00247703053014736, 0.00247703053014736, 0.00247703053014736,
            0.00247703053014736, 0.00247703053014736, 0.00247703053014736, 0.00247703053014736,
            0.00247703053014736, 0.00247703053014736, 0.00247703053014736, 0.00247703053014736,
            0.00247703053014736, 0.00247703053014736, 0.00247703053014736, 0.00194525795489652,
            0.00194525795489652, 0.00194525795489652, 0.00194525795489652, 0.00194525795489652,
            0.00194525795489652, 0.00194525795489652, 0.00194525795489652, 0.00194525795489652,
            0.00194525795489652, 0.00194525795489652, 0.00194525795489652, 0.00194525795489652,
            0.00332288033251890, 0.00332288033251890, 0.00332288033251890, 0.00332288033251890,
            0.00332288033251890, 0.00332288033251890, 0.00332288033251890, 0.00332288033251890,
            0.00332288033251890, 0.00332288033251890, 0.00332288033251890, 0.00295924396888254,
            0.00295924396888254, 0.00295924396888254, 0.00295924396888254, 0.00295924396888254,
            0.00295924396888254, 0.00295924396888254, 0.00295924396888254, 0.00295924396888254,
            0.00295924396888254, 0.00295924396888254, 0.00320166821130678, 0.00320166821130678,
            0.00320166821130678, 0.00320166821130678, 0.00320166821130678, 0.00320166821130678,
            0.00320166821130678, 0.00320166821130678, 0.00320166821130678, 0.00320166821130678,
            0.00320166821130678, 0.00320166821130678, 0.00543976344940202, 0.00543976344940202,
            0.00543976344940202, 0.00543976344940202, 0.00543976344940202, 0.00543976344940202,
            0.00543976344940202, 0.00446833487797345, 0.00446833487797345, 0.00446833487797345,
            0.00446833487797345, 0.00446833487797345, 0.00446833487797345, 0.00446833487797345,
            0.00446833487797345, 0.00446833487797345, 0.00446833487797345, 0.00453500154464011,
            0.00453500154464011, 0.00453500154464011, 0.00453500154464011, 0.00453500154464011,
            0.00453500154464011, 0.00666833487797345, 0.00666833487797345, 0.00666833487797345,
            0.00666833487797345, 0.00666833487797345, 0.00476833487797345, 0.00476833487797345,
            0.00476833487797345, 0.00476833487797345, 0.00476833487797345, 0.00476833487797345,
            0.00476833487797345, 0.00476833487797345, 0.00476833487797345, 0.00476833487797345,
            0.00349333487797345, 0.00349333487797345, 0.00349333487797345, 0.00349333487797345,
            0.00349333487797345, 0.00349333487797345, 0.00349333487797345, 0.00349333487797345,
            0.00143500154464011, 0.00143500154464011, 0.00143500154464011, 0.00143500154464011,
            0.00143500154464011, 0.00143500154464011, 0.00143500154464011, 0.00143500154464011,
            0.00143500154464011, 0.00143500154464011, 0.00143500154464011, 0.00143500154464011,
            0.00143500154464011, 0.00143500154464011, 0.00143500154464011, 0.00143500154464011,
            0.00143500154464011, 0.00143500154464011, 0.00143500154464011, 0.00143500154464011,
            0.00143500154464011, 0.00143500154464011, 0.00143500154464011, 0.00143500154464011,
            0.00143500154464011, 0.00143500154464011, 0.00143500154464011, 0.00143500154464011,
            0.00143500154464011, 0.00143500154464011, 0.00168083487797345, 0.00168083487797345,
            0.00168083487797345, 0.00168083487797345, 0.00168083487797345, 0.00168083487797345,
            0.00168083487797345, 0.00168083487797345, 0.00168083487797345, 0.00168083487797345,
            0.00168083487797345, 0.00168083487797345, 0.00168083487797345, 0.00168083487797345,
            0.00168083487797345, 0.00168083487797345, 0.00168083487797345, 0.00168083487797345,
            0.00168083487797345, 0.00168083487797345, 0.00168083487797345, 0.00168083487797345,
            0.00168083487797345, 0.00168083487797345, 0.00168083487797345, 0.00168083487797345,
            0.00168083487797345, 0.00168083487797345, 0.00168083487797345, 0.00168083487797345,
            0.00168083487797345, 0.00168083487797345, 0.00244728224639450, 0.00244728224639450,
            0.00244728224639450, 0.00244728224639450, 0.00244728224639450, 0.00244728224639450,
            0.00244728224639450, 0.00244728224639450, 0.00244728224639450, 0.00244728224639450,
            0.00244728224639450, 0.00244728224639450, 0.00244728224639450, 0.00244728224639450,
            0.00244728224639450, 0.00244728224639450, 0.00244728224639450, 0.00244728224639450,
            0.00244728224639450]

p_home = [0.002179424, 0.000841881, 0.001131726, 0.000816353, 0.001149809, 0.001409872, 0.001423699, 0.0079992,
          0.006294165, 0.007199333, 0.008264581, 0.005056073, 0.004272693, 0.007242411, 0.001411467,
          0.008768221, 0.006169186, 0.004884825, 0.003348911, 0.006000065, 0.004476914, 0.008164598,
          0.003163835, 0.001048762, 0.004809838, 0.004215256, 0.002183147, 0.001288083, 0.005709156,
          0.006746749, 0.003810536, 0.006380853, 0.010689178, 0.009228251, 0.003539836, 0.004008907,
          0.005292204, 0.007584907, 0.003038324, 0.001634302, 0.002668173, 0.005618214, 0.004447132,
          0.003064915, 0.006242046, 0.004317366, 0.004790692, 0.006080371, 0.002599567, 0.005411333,
          0.002968123, 0.001241283, 0.002937809, 0.011142826, 0.003964234, 0.005137443, 0.010103637,
          0.007275916, 0.007029681, 0.005507594, 0.002532557, 0.009643075, 0.004789096, 0.001373176,
          0.002728801, 0.002275153, 0.003417516, 0.003159049, 0.000482898, 0.002373009, 0.001502409, 0.00516882,
          0.003409007, 0.003906796, 0.005687883, 0.001611966, 0.009517033, 0.009055939, 0.002465015,
          0.005983578, 0.000173907, 0.003569087, 0.000415356, 0.001346584, 0.013869499, 0.002637859,
          0.000187735, 0.002670832, 0.002505434, 0.009649457, 0.002728269, 0.00528529, 0.004660926, 0.005260826,
          0.003524945, 0.002680937, 0.004355658, 0.0055996, 0.005123615, 0.000269104, 0.003341997, 0.005140634,
          0.005577263, 0.002396941, 0.001358816, 0.001745986, 0.003809472, 0.002937809, 0.000133488,
          0.002270367, 0.004171114, 0.004834302, 0.004994913, 0.010926904, 0.002318763, 0.006648361,
          0.001589629, 0.002170383, 0.000216985, 0.004527438, 0.003524413, 0.003463253, 0.005880404,
          0.005685756, 0.007113709, 0.004765164, 0.006286187, 0.008035896, 0.004739105, 0.007849225, 0.00460668,
          0.006982348, 0.004689113, 0.008743225, 0.005621405, 0.006360643, 0.001961376, 0.003081934,
          0.006064948, 0.006056438, 0.008173639, 0.009745186, 0.002040086, 0.003359547, 0.001371048,
          0.001147681, 0.007758283, 0.008347546, 0.005074155, 0.005177861, 0.003152135, 0.005273058,
          0.000441948, 0.007528534, 0.003914774, 0.002786238, 0.001567292, 0.006915338, 0.002371946, 0.00476676,
          0.004455641, 0.008365628, 0.007479074, 0.005123615, 0.00630161, 0.004676349, 0.007090309, 0.00309257,
          0.000744557, 0.003857868, 0.003626524, 0.002239521, 0.00985687, 0.001501878, 0.002587867, 0.001406681,
          0.003653647, 0.002729865, 0.002678277, 0.004285989, 0.002655409, 0.002747947, 0.002499052,
          0.001760877, 0.003461658, 0.003993484, 0.001972012, 0.001262556, 0.003574937, 0.004850256,
          0.005712347, 0.00273146, 0.00258574, 0.004400331, 0.000909423, 0.000156889, 0.000121788, 1.38275E-05,
          0.001149277, 0.002739438, 0.000824331, 0.002140601, 0.006211732, 0.006350007, 0.002602226,
          0.009492569, 0.007946549, 0.004410436, 0.005906463, 0.001948612, 0.003566959, 0.002649027,
          0.004590193, 0.001085989, 0.001212032, 0.003469103, 0.003255841, 0.001792787, 0.001353498,
          0.003106398, 0.002745819, 0.003136712, 0.0011881, 0.002260262, 0.003847232, 0.002060827, 0.001966162,
          9.04E-06, 0.001079076, 0.002311849, 0.001631643, 0.002749542, 0.001929998, 0.004249824, 0.004931626,
          0.000511617, 0.005449625, 0.002405982, 0.003795645, 0.002820275, 0.004484892, 0.003049492,
          0.002195379, 0.002629349, 0.001238624, 0.001699717, 0.000154761, 0.002837294, 0.00510181]


def home_location(exclude=[]):
    while True:
        l = int(choice(registration_districts, p=p_home))
        if l in exclude:
            False
        else:
            return l


def office_location(exclude=[]):
    while True:
        l = int(choice(registration_districts, p=p_office))
        if l in exclude:
            False
        else:
            return l


class EmployeeType(Enum):
    boss = 65  # avg. percent of work hours spent in external meetings (including traveltimes)
    middle_management = 30
    worker = 15


class Gender(Enum):
    male = 0.5322
    female = 0.4678

    @classmethod
    def pick(cls):
        return choice([cls.female, cls.male], p=[cls.female.value, cls.male.value])

    @classmethod
    def valid(cls, g):
        assert g in [cls.female, cls.male]

    def is_female(self):
        return self.name == "female"


def pick_gender():
    return Gender.pick()


def pick_age(gender):
    Gender.valid(gender)

    age = [15, 20, 25, 30, 35, 40, 45, 50, 55, 60]
    if gender == "f":
        p_age = [0.03, 0.09, 0.12, 0.12, 0.11, 0.13, 0.15, 0.15, 0.09, 0.01]
    else:
        p_age = [0.04, 0.09, 0.11, 0.12, 0.12, 0.12, 0.13, 0.13, 0.1, 0.04]

    assert len(age) == len(p_age)
    assert sum(p_age) == 1

    return int(choice(age, p=p_age))


def weekly_minutes_and_days_per_week(gender, e_type, boss_work_hours=40, boss_workdays=4):
    Gender.valid(gender)

    week_minutes_hist = [10 * ONEHOUR, 20 * ONEHOUR, 30 * ONEHOUR, 40 * ONEHOUR, 50 * ONEHOUR, 60 * ONEHOUR]  # creatively rounded wrt Statistik Austria

    if gender == "f":
        p_minutes = [0.09, 0.19, 0.23, 0.36, 0.11, 0.02]
    else:
        p_minutes = [0.04, 0.04, 0.05, 0.54, 0.26, 0.07]

    day_hist = list(range(1, 8))
    p_working_days = [0.015, 0.027, 0.044, 0.055, 0.734, 0.101, 0.024]

    assert len(week_minutes_hist) == len(p_minutes)
    assert len(day_hist) == len(p_working_days)
    assert sum(p_minutes) == 1
    assert sum(p_working_days) == 1

    while True:
        weekly_minutes = int(choice(week_minutes_hist, p=p_minutes))
        days_per_week = int(choice(day_hist, p=p_working_days))

        weekly_minutes = (weekly_minutes/days_per_week)//60*60*days_per_week  # to get full hours per day, not 8h20min

        if e_type == EmployeeType.boss and weekly_minutes/ONEHOUR < boss_work_hours:  # bosses work a lot
            False
        elif e_type == EmployeeType.boss and days_per_week < boss_workdays:
            False
        elif weekly_minutes >= 1200 and days_per_week < 2:
            False
        elif weekly_minutes >= 1800 and days_per_week < 3:
            False
        elif weekly_minutes >= 2400 and days_per_week < 4:
            False
        elif weekly_minutes >= 3000 and days_per_week < 5:
            False
        elif weekly_minutes >= 3600 and days_per_week < 6:
            False
        else:
            return weekly_minutes, days_per_week
            break


begin = [5 * ONEHOUR, 6 * ONEHOUR, 7 * ONEHOUR, 8 * ONEHOUR, 510, 9 * ONEHOUR, 570, 10 * ONEHOUR, 630, 11 * ONEHOUR]
p_begin = [0.03, 0.13, 0.34, 0.32, 0.1, 0.01, 0, 0.01, 0.02, 0.04]
assert len(begin) == len(p_begin)
assert sum(p_begin) == 1


def work_begin():
    return int(choice(begin, p=p_begin))


meetings = list(range(0, 11))


meeting_duration = list(range(30, 185, 30))
p_meeting_dur = [0.1, 0.15, 0.25, 0.25, 0.15, 0.1]
assert len(meeting_duration) == len(p_meeting_dur)
assert sum(p_meeting_dur) == 1


def pick_meeting_duration():
    return int(choice(meeting_duration, p=p_meeting_dur))


def fits_inside(minutes_a, work_before_meet, minutes_b):

    return (minutes_a-minutes_b-work_before_meet) >= TT_BUFFER_MIN


def reasonable_daytime(begin, DUSK=5, DAWN=22):
    minutes = begin%1440
    return minutes >= DUSK * ONEHOUR and minutes <= DAWN * ONEHOUR


def has_license():
    license = [False, True]
    p_license = [0.13, 0.87]
    return bool(choice(license, p=p_license))


def private_meeting_morning():
    """
    we don't know much about the statistics of pre- and after-work activities (shopping, socialising, caregiving, sports),
    in particular how often they would be relevant for a company car fleet optimisation.
    Hence for now pre-work private meetings are generated with a 20% chance,
     and after-work meetings with a 2/3 chance.
    """
    return bool(choice([True, False], p=[0.2, 0.8]))


def private_meeting_evening():
    return bool(choice([True, False], p=[0.65, 0.35]))


@attr.s
class MOTPreferences(object):
    has_license = attr.ib()
    desc = attr.ib()

    car = attr.ib()
    ecar = attr.ib()

    pt = attr.ib()
    bike = attr.ib()

    foot = attr.ib(default=True)
    taxi = attr.ib(default=False)

    def to_dict(self):
        res = []
        for type, accepted in vars(self).items():
            mots = MoT.manager.get_mots(type)
            if mots:
                for m in mots:
                    d = m.to_dict()
                    d["accepted"] = accepted
                    res.append(d)
        return res

    def to_types_dict(self):
        return vars(self).copy()


"""
Vienna Mobility Preferences
car – e-car – public transports – bike

Genereller Mischtyp	[1, 1, 1, 1] oder [0, 1, 1, 1] oder [1, 0, 1, 1]
Mischtyp ohne nicht motorisierte Fortbewegung	[1, 1, 1, 0] oder [1, 0, 1, 0] oder [0, 1, 1, 0]
Mischtyp ohne öffentliche Verkehrsmittel	[1, 1, 0, 1] oder [1, 0, 0, 1] oder [0, 1, 0, 1]
Mischtyp ohne Kraftfahrzeug	[0, 0, 1, 1]
Kraftfahrzeug	[1, 1, 0, 0] oder [1, 0, 0, 0] oder [0, 1, 0, 0]
Öffentliche Verkehrsmittel	[0, 0, 1, 0]
Nicht motorisiert	[0, 0, 1, 1]

"""
_p_female = [0.19, 0.03, 0.01, 0.04, 0.18, 0.42, 0.13]
_p_male =   [0.18, 0.03, 0.02, 0.03, 0.26, 0.35, 0.13]
assert sum(_p_female) == 1
assert sum(_p_male) == 1


class MOTPreferencesVienna(object):
    def __init__(self, gender):
        self.has_lic = has_license()

        models = [
            ("generic", rchoice([[True, True, True, True],[False, True, True, True], [True, False, True, True]])),
            ("motorised_only", rchoice([[True, True, True, False], [True, False, True, False], [False, True, True, False]])),
            ("no_pt", rchoice([[True, True, False, True], [True, False, False, True], [False, True, False, True]])),
            ("no_motorised", [False, False, True, True]),
            ("cars_only", rchoice([[True, True, False, False], [True, False, False, False], [False, True, False, False]])),
            ("pt_only", [False, False, True, False]),
            ("bike_only", [False, False, False, True])]
        p_mt = _p_female if gender.is_female() else _p_male

        if not self.has_lic:
            models = [("no_motorised", [False, False, True, True]),
                      ("pt_only", [False, False, True, False]),
                      ("bike_only", [False, False, False, True])]
            p_mt = [0.33, 0.33, 0.34]

        modelname, model = models[choice(list(range(len(models))), p=p_mt)]

        self.pref_car = model[0]
        self.pref_ecar = model[1]
        self.pref_pt = model[2]
        self.pref_bike = model[3]
        self.pref_type = modelname


def create_mot_preferences_vienna(gender):
    m = MOTPreferencesVienna(gender)

    return MOTPreferences(desc="Vienna Mobility Type " + m.pref_type, has_license=m.has_lic, car=m.pref_car, ecar=m.pref_ecar, pt=m.pref_pt, bike=m.pref_bike)


def create_mot_preferences_simple():
    desc = "simple mot preference model"
    mprefcar = [0, 1]
    mprefecar = [0, 1]
    mprefpublic = [0, 1]
    mprefbike = [0, 1]

    has_lic = has_license()
    pref_car = bool(choice(mprefcar)) if has_lic else False
    pref_ecar = bool(choice(mprefecar)) if has_lic else False
    pref_pt = bool(choice(mprefpublic))
    pref_bike = bool(choice(mprefbike))

    return MOTPreferences(desc=desc, has_license=has_lic, car=pref_car, ecar=pref_ecar, pt=pref_pt, bike=pref_bike)
